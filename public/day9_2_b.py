import networkx as nx

input = open('9-4096-4.in').read().strip()
matrix=[[int(c) for c in list(line)] for line in [e for e in input.split('\n')]]

#We want to find the 3 largest components in the graph generated by adjacent-non-9s being related (belonging to same component)

G = nx.Graph()
for i in range(0,len(matrix)):
    print(i)
    for j in range(0,len(matrix[0])):
        if matrix[i][j]==9: 
            continue
        neighbour_candidates=[(i-1,j),(i+1,j),(i,j-1),(i,j+1)]
        for n in neighbour_candidates:
            if 0<=n[0]<len(matrix) and 0<=n[1]<len(matrix[0]) and matrix[n[0]][n[1]]!=9:
                #x=1
                G.add_edge(f'{i}_{j}', f'{n[0]}_{n[1]}')
                #G.add_edge((i,j), (n[0],n[1]))

res=[len(c) for c in sorted(nx.connected_components(G), key=len, reverse=True)]
print(res[0]*res[1]*res[2])

